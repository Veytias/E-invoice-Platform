{"ast":null,"code":"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport ownerDocument from '../utils/ownerDocument';\nimport { useForkRef, setRef } from '../utils/reactHelpers';\nimport useEventCallback from '../utils/useEventCallback';\nimport { elementAcceptingRef, exactProp } from '@material-ui/utils';\n\nfunction useMountedRef() {\n  var mountedRef = React.useRef(false);\n  React.useEffect(function () {\n    mountedRef.current = true;\n    return function () {\n      mountedRef.current = false;\n    };\n  }, []);\n  return mountedRef;\n}\n\nfunction mapEventPropToEvent(eventProp) {\n  return eventProp.substring(2).toLowerCase();\n}\n/**\n * Listen for click events that occur somewhere in the document, outside of the element itself.\n * For instance, if you need to hide a menu when people click anywhere else on your page.\n */\n\n\nvar ClickAwayListener = React.forwardRef(function ClickAwayListener(props, ref) {\n  var children = props.children,\n      _props$mouseEvent = props.mouseEvent,\n      mouseEvent = _props$mouseEvent === void 0 ? 'onClick' : _props$mouseEvent,\n      _props$touchEvent = props.touchEvent,\n      touchEvent = _props$touchEvent === void 0 ? 'onTouchEnd' : _props$touchEvent,\n      onClickAway = props.onClickAway;\n  var mountedRef = useMountedRef();\n  var movedRef = React.useRef(false);\n  var nodeRef = React.useRef(null);\n  var handleNodeRef = useForkRef(nodeRef, ref); // can be removed once we drop support for non ref forwarding class components\n\n  var handleOwnRef = React.useCallback(function (instance) {\n    // #StrictMode ready\n    setRef(handleNodeRef, ReactDOM.findDOMNode(instance));\n  }, [handleNodeRef]);\n  var handleRef = useForkRef(children.ref, handleOwnRef);\n  var handleClickAway = useEventCallback(function (event) {\n    // Ignore events that have been `event.preventDefault()` marked.\n    if (event.defaultPrevented) {\n      return;\n    } // IE 11 support, which trigger the handleClickAway even after the unbind\n\n\n    if (!mountedRef.current) {\n      return;\n    } // Do not act if user performed touchmove\n\n\n    if (movedRef.current) {\n      movedRef.current = false;\n      return;\n    }\n\n    var node = nodeRef.current; // The child might render null.\n\n    if (!node) {\n      return;\n    }\n\n    var doc = ownerDocument(node);\n\n    if (doc.documentElement && doc.documentElement.contains(event.target) && !node.contains(event.target)) {\n      onClickAway(event);\n    }\n  });\n  var handleTouchMove = React.useCallback(function () {\n    movedRef.current = true;\n  }, []);\n  React.useEffect(function () {\n    if (touchEvent !== false) {\n      var mappedTouchEvent = mapEventPropToEvent(touchEvent);\n      document.addEventListener(mappedTouchEvent, handleClickAway);\n      document.addEventListener('touchmove', handleTouchMove);\n      return function () {\n        document.removeEventListener(mappedTouchEvent, handleClickAway);\n        document.removeEventListener('touchmove', handleTouchMove);\n      };\n    }\n\n    return undefined;\n  }, [handleClickAway, handleTouchMove, touchEvent]);\n  React.useEffect(function () {\n    if (mouseEvent !== false) {\n      var mappedMouseEvent = mapEventPropToEvent(mouseEvent);\n      document.addEventListener(mappedMouseEvent, handleClickAway);\n      return function () {\n        document.removeEventListener(mappedMouseEvent, handleClickAway);\n      };\n    }\n\n    return undefined;\n  }, [handleClickAway, mouseEvent]);\n  return React.createElement(React.Fragment, null, React.cloneElement(children, {\n    ref: handleRef\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? ClickAwayListener.propTypes = {\n  /**\n   * The wrapped element.\n   */\n  children: elementAcceptingRef.isRequired,\n\n  /**\n   * The mouse event to listen to. You can disable the listener by providing `false`.\n   */\n  mouseEvent: PropTypes.oneOf(['onClick', 'onMouseDown', 'onMouseUp', false]),\n\n  /**\n   * Callback fired when a \"click away\" event is detected.\n   */\n  onClickAway: PropTypes.func.isRequired,\n\n  /**\n   * The touch event to listen to. You can disable the listener by providing `false`.\n   */\n  touchEvent: PropTypes.oneOf(['onTouchStart', 'onTouchEnd', false])\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  ClickAwayListener['propTypes' + ''] = exactProp(ClickAwayListener.propTypes);\n}\n\nexport default ClickAwayListener;","map":{"version":3,"sources":["C:/Users/barry/Desktop/SENG2021/h18abrowniefrontend/node_modules/@material-ui/core/esm/ClickAwayListener/ClickAwayListener.js"],"names":["React","ReactDOM","PropTypes","ownerDocument","useForkRef","setRef","useEventCallback","elementAcceptingRef","exactProp","useMountedRef","mountedRef","useRef","useEffect","current","mapEventPropToEvent","eventProp","substring","toLowerCase","ClickAwayListener","forwardRef","props","ref","children","_props$mouseEvent","mouseEvent","_props$touchEvent","touchEvent","onClickAway","movedRef","nodeRef","handleNodeRef","handleOwnRef","useCallback","instance","findDOMNode","handleRef","handleClickAway","event","defaultPrevented","node","doc","documentElement","contains","target","handleTouchMove","mappedTouchEvent","document","addEventListener","removeEventListener","undefined","mappedMouseEvent","createElement","Fragment","cloneElement","process","env","NODE_ENV","propTypes","isRequired","oneOf","func"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,aAAP,MAA0B,wBAA1B;AACA,SAASC,UAAT,EAAqBC,MAArB,QAAmC,uBAAnC;AACA,OAAOC,gBAAP,MAA6B,2BAA7B;AACA,SAASC,mBAAT,EAA8BC,SAA9B,QAA+C,oBAA/C;;AAEA,SAASC,aAAT,GAAyB;AACvB,MAAIC,UAAU,GAAGV,KAAK,CAACW,MAAN,CAAa,KAAb,CAAjB;AACAX,EAAAA,KAAK,CAACY,SAAN,CAAgB,YAAY;AAC1BF,IAAAA,UAAU,CAACG,OAAX,GAAqB,IAArB;AACA,WAAO,YAAY;AACjBH,MAAAA,UAAU,CAACG,OAAX,GAAqB,KAArB;AACD,KAFD;AAGD,GALD,EAKG,EALH;AAMA,SAAOH,UAAP;AACD;;AAED,SAASI,mBAAT,CAA6BC,SAA7B,EAAwC;AACtC,SAAOA,SAAS,CAACC,SAAV,CAAoB,CAApB,EAAuBC,WAAvB,EAAP;AACD;AACD;AACA;AACA;AACA;;;AAGA,IAAIC,iBAAiB,GAAGlB,KAAK,CAACmB,UAAN,CAAiB,SAASD,iBAAT,CAA2BE,KAA3B,EAAkCC,GAAlC,EAAuC;AAC9E,MAAIC,QAAQ,GAAGF,KAAK,CAACE,QAArB;AAAA,MACIC,iBAAiB,GAAGH,KAAK,CAACI,UAD9B;AAAA,MAEIA,UAAU,GAAGD,iBAAiB,KAAK,KAAK,CAA3B,GAA+B,SAA/B,GAA2CA,iBAF5D;AAAA,MAGIE,iBAAiB,GAAGL,KAAK,CAACM,UAH9B;AAAA,MAIIA,UAAU,GAAGD,iBAAiB,KAAK,KAAK,CAA3B,GAA+B,YAA/B,GAA8CA,iBAJ/D;AAAA,MAKIE,WAAW,GAAGP,KAAK,CAACO,WALxB;AAMA,MAAIjB,UAAU,GAAGD,aAAa,EAA9B;AACA,MAAImB,QAAQ,GAAG5B,KAAK,CAACW,MAAN,CAAa,KAAb,CAAf;AACA,MAAIkB,OAAO,GAAG7B,KAAK,CAACW,MAAN,CAAa,IAAb,CAAd;AACA,MAAImB,aAAa,GAAG1B,UAAU,CAACyB,OAAD,EAAUR,GAAV,CAA9B,CAV8E,CAUhC;;AAE9C,MAAIU,YAAY,GAAG/B,KAAK,CAACgC,WAAN,CAAkB,UAAUC,QAAV,EAAoB;AACvD;AACA5B,IAAAA,MAAM,CAACyB,aAAD,EAAgB7B,QAAQ,CAACiC,WAAT,CAAqBD,QAArB,CAAhB,CAAN;AACD,GAHkB,EAGhB,CAACH,aAAD,CAHgB,CAAnB;AAIA,MAAIK,SAAS,GAAG/B,UAAU,CAACkB,QAAQ,CAACD,GAAV,EAAeU,YAAf,CAA1B;AACA,MAAIK,eAAe,GAAG9B,gBAAgB,CAAC,UAAU+B,KAAV,EAAiB;AACtD;AACA,QAAIA,KAAK,CAACC,gBAAV,EAA4B;AAC1B;AACD,KAJqD,CAIpD;;;AAGF,QAAI,CAAC5B,UAAU,CAACG,OAAhB,EAAyB;AACvB;AACD,KATqD,CASpD;;;AAGF,QAAIe,QAAQ,CAACf,OAAb,EAAsB;AACpBe,MAAAA,QAAQ,CAACf,OAAT,GAAmB,KAAnB;AACA;AACD;;AAED,QAAI0B,IAAI,GAAGV,OAAO,CAAChB,OAAnB,CAjBsD,CAiB1B;;AAE5B,QAAI,CAAC0B,IAAL,EAAW;AACT;AACD;;AAED,QAAIC,GAAG,GAAGrC,aAAa,CAACoC,IAAD,CAAvB;;AAEA,QAAIC,GAAG,CAACC,eAAJ,IAAuBD,GAAG,CAACC,eAAJ,CAAoBC,QAApB,CAA6BL,KAAK,CAACM,MAAnC,CAAvB,IAAqE,CAACJ,IAAI,CAACG,QAAL,CAAcL,KAAK,CAACM,MAApB,CAA1E,EAAuG;AACrGhB,MAAAA,WAAW,CAACU,KAAD,CAAX;AACD;AACF,GA5BqC,CAAtC;AA6BA,MAAIO,eAAe,GAAG5C,KAAK,CAACgC,WAAN,CAAkB,YAAY;AAClDJ,IAAAA,QAAQ,CAACf,OAAT,GAAmB,IAAnB;AACD,GAFqB,EAEnB,EAFmB,CAAtB;AAGAb,EAAAA,KAAK,CAACY,SAAN,CAAgB,YAAY;AAC1B,QAAIc,UAAU,KAAK,KAAnB,EAA0B;AACxB,UAAImB,gBAAgB,GAAG/B,mBAAmB,CAACY,UAAD,CAA1C;AACAoB,MAAAA,QAAQ,CAACC,gBAAT,CAA0BF,gBAA1B,EAA4CT,eAA5C;AACAU,MAAAA,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAuCH,eAAvC;AACA,aAAO,YAAY;AACjBE,QAAAA,QAAQ,CAACE,mBAAT,CAA6BH,gBAA7B,EAA+CT,eAA/C;AACAU,QAAAA,QAAQ,CAACE,mBAAT,CAA6B,WAA7B,EAA0CJ,eAA1C;AACD,OAHD;AAID;;AAED,WAAOK,SAAP;AACD,GAZD,EAYG,CAACb,eAAD,EAAkBQ,eAAlB,EAAmClB,UAAnC,CAZH;AAaA1B,EAAAA,KAAK,CAACY,SAAN,CAAgB,YAAY;AAC1B,QAAIY,UAAU,KAAK,KAAnB,EAA0B;AACxB,UAAI0B,gBAAgB,GAAGpC,mBAAmB,CAACU,UAAD,CAA1C;AACAsB,MAAAA,QAAQ,CAACC,gBAAT,CAA0BG,gBAA1B,EAA4Cd,eAA5C;AACA,aAAO,YAAY;AACjBU,QAAAA,QAAQ,CAACE,mBAAT,CAA6BE,gBAA7B,EAA+Cd,eAA/C;AACD,OAFD;AAGD;;AAED,WAAOa,SAAP;AACD,GAVD,EAUG,CAACb,eAAD,EAAkBZ,UAAlB,CAVH;AAWA,SAAOxB,KAAK,CAACmD,aAAN,CAAoBnD,KAAK,CAACoD,QAA1B,EAAoC,IAApC,EAA0CpD,KAAK,CAACqD,YAAN,CAAmB/B,QAAnB,EAA6B;AAC5ED,IAAAA,GAAG,EAAEc;AADuE,GAA7B,CAA1C,CAAP;AAGD,CA5EuB,CAAxB;AA6EAmB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCtC,iBAAiB,CAACuC,SAAlB,GAA8B;AACpE;AACF;AACA;AACEnC,EAAAA,QAAQ,EAAEf,mBAAmB,CAACmD,UAJsC;;AAMpE;AACF;AACA;AACElC,EAAAA,UAAU,EAAEtB,SAAS,CAACyD,KAAV,CAAgB,CAAC,SAAD,EAAY,aAAZ,EAA2B,WAA3B,EAAwC,KAAxC,CAAhB,CATwD;;AAWpE;AACF;AACA;AACEhC,EAAAA,WAAW,EAAEzB,SAAS,CAAC0D,IAAV,CAAeF,UAdwC;;AAgBpE;AACF;AACA;AACEhC,EAAAA,UAAU,EAAExB,SAAS,CAACyD,KAAV,CAAgB,CAAC,cAAD,EAAiB,YAAjB,EAA+B,KAA/B,CAAhB;AAnBwD,CAAtE,GAoBI,KAAK,CApBT;;AAsBA,IAAIL,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC;AACAtC,EAAAA,iBAAiB,CAAC,cAAc,EAAf,CAAjB,GAAsCV,SAAS,CAACU,iBAAiB,CAACuC,SAAnB,CAA/C;AACD;;AAED,eAAevC,iBAAf","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport ownerDocument from '../utils/ownerDocument';\nimport { useForkRef, setRef } from '../utils/reactHelpers';\nimport useEventCallback from '../utils/useEventCallback';\nimport { elementAcceptingRef, exactProp } from '@material-ui/utils';\n\nfunction useMountedRef() {\n  var mountedRef = React.useRef(false);\n  React.useEffect(function () {\n    mountedRef.current = true;\n    return function () {\n      mountedRef.current = false;\n    };\n  }, []);\n  return mountedRef;\n}\n\nfunction mapEventPropToEvent(eventProp) {\n  return eventProp.substring(2).toLowerCase();\n}\n/**\n * Listen for click events that occur somewhere in the document, outside of the element itself.\n * For instance, if you need to hide a menu when people click anywhere else on your page.\n */\n\n\nvar ClickAwayListener = React.forwardRef(function ClickAwayListener(props, ref) {\n  var children = props.children,\n      _props$mouseEvent = props.mouseEvent,\n      mouseEvent = _props$mouseEvent === void 0 ? 'onClick' : _props$mouseEvent,\n      _props$touchEvent = props.touchEvent,\n      touchEvent = _props$touchEvent === void 0 ? 'onTouchEnd' : _props$touchEvent,\n      onClickAway = props.onClickAway;\n  var mountedRef = useMountedRef();\n  var movedRef = React.useRef(false);\n  var nodeRef = React.useRef(null);\n  var handleNodeRef = useForkRef(nodeRef, ref); // can be removed once we drop support for non ref forwarding class components\n\n  var handleOwnRef = React.useCallback(function (instance) {\n    // #StrictMode ready\n    setRef(handleNodeRef, ReactDOM.findDOMNode(instance));\n  }, [handleNodeRef]);\n  var handleRef = useForkRef(children.ref, handleOwnRef);\n  var handleClickAway = useEventCallback(function (event) {\n    // Ignore events that have been `event.preventDefault()` marked.\n    if (event.defaultPrevented) {\n      return;\n    } // IE 11 support, which trigger the handleClickAway even after the unbind\n\n\n    if (!mountedRef.current) {\n      return;\n    } // Do not act if user performed touchmove\n\n\n    if (movedRef.current) {\n      movedRef.current = false;\n      return;\n    }\n\n    var node = nodeRef.current; // The child might render null.\n\n    if (!node) {\n      return;\n    }\n\n    var doc = ownerDocument(node);\n\n    if (doc.documentElement && doc.documentElement.contains(event.target) && !node.contains(event.target)) {\n      onClickAway(event);\n    }\n  });\n  var handleTouchMove = React.useCallback(function () {\n    movedRef.current = true;\n  }, []);\n  React.useEffect(function () {\n    if (touchEvent !== false) {\n      var mappedTouchEvent = mapEventPropToEvent(touchEvent);\n      document.addEventListener(mappedTouchEvent, handleClickAway);\n      document.addEventListener('touchmove', handleTouchMove);\n      return function () {\n        document.removeEventListener(mappedTouchEvent, handleClickAway);\n        document.removeEventListener('touchmove', handleTouchMove);\n      };\n    }\n\n    return undefined;\n  }, [handleClickAway, handleTouchMove, touchEvent]);\n  React.useEffect(function () {\n    if (mouseEvent !== false) {\n      var mappedMouseEvent = mapEventPropToEvent(mouseEvent);\n      document.addEventListener(mappedMouseEvent, handleClickAway);\n      return function () {\n        document.removeEventListener(mappedMouseEvent, handleClickAway);\n      };\n    }\n\n    return undefined;\n  }, [handleClickAway, mouseEvent]);\n  return React.createElement(React.Fragment, null, React.cloneElement(children, {\n    ref: handleRef\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? ClickAwayListener.propTypes = {\n  /**\n   * The wrapped element.\n   */\n  children: elementAcceptingRef.isRequired,\n\n  /**\n   * The mouse event to listen to. You can disable the listener by providing `false`.\n   */\n  mouseEvent: PropTypes.oneOf(['onClick', 'onMouseDown', 'onMouseUp', false]),\n\n  /**\n   * Callback fired when a \"click away\" event is detected.\n   */\n  onClickAway: PropTypes.func.isRequired,\n\n  /**\n   * The touch event to listen to. You can disable the listener by providing `false`.\n   */\n  touchEvent: PropTypes.oneOf(['onTouchStart', 'onTouchEnd', false])\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  ClickAwayListener['propTypes' + ''] = exactProp(ClickAwayListener.propTypes);\n}\n\nexport default ClickAwayListener;"]},"metadata":{},"sourceType":"module"}