{"ast":null,"code":"import _slicedToArray from\"C:/Users/barry/Desktop/SENG2021/h18abrowniefrontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from'react';import'./wrapper.css';import axios from'axios';import'./wrapper.css';import Credentials from'../Credentials';import{Box,Button,Container,TextField,Typography}from'@material-ui/core';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function UploadInvoice(){var _React$useState=React.useState(),_React$useState2=_slicedToArray(_React$useState,2),selectedFile=_React$useState2[0],setSelectedFile=_React$useState2[1];var _React$useState3=React.useState(),_React$useState4=_slicedToArray(_React$useState3,2),report=_React$useState4[0],setReport=_React$useState4[1];var _React$useState5=React.useState(),_React$useState6=_slicedToArray(_React$useState5,2),error=_React$useState6[0],setError=_React$useState6[1];var token=React.useContext(Credentials);function handleSubmit(event){event.preventDefault();setSelectedFile(event.target[0].files[0]);var file=selectedFile;var report_type=event.target[2].value;if(!file||!report_type)return;var formData=new FormData();formData.append('token',token.replace(/['\"]+/g,''));formData.append('file',file);formData.append('report_type',report_type);axios({method:\"post\",url:\"https://h18abrownie.herokuapp.com/invoice/upload/API\",data:formData,headers:{\"Content-Type\":\"multipart/form-data\"}}).then(function(response){console.log(JSON.parse(JSON.stringify(response.data)));setReport(JSON.stringify(response.data));/*  Don't know how to pass query string for now like invoice:id kind of format. \r\n            Will implement if learnt later\r\n            For now it is only json format.\r\n        */ // const report_id = response.data['report_id'];\n// const queryString = '?token=';\n// queryString.concat(token);\n// queryString.concat('&report_id');\n// queryString.concat(report_id);\n// props.history.push({\n//   pathname: '/reports/read',\n//   search: queryString,\n//   state: { report_type }\n// });\n// const data = response.data;\n}).catch(function(error){setError(\"File is not xml format or report type is not correct\");});}return/*#__PURE__*/_jsx(Container,{component:\"main\",maxWidth:\"lg\",children:/*#__PURE__*/_jsxs(Box,{boxShadow:1,children:[/*#__PURE__*/_jsx(Typography,{component:\"h1\",variant:\"h2\",children:\"Upload Invoice\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(TextField,{variant:\"outlined\",margin:\"normal\",required:true,fullWidth:true,id:\"file\",name:\"file\",type:\"file\",autoFocus:true}),/*#__PURE__*/_jsx(TextField,{variant:\"outlined\",margin:\"normal\",required:true,fullWidth:true,id:\"report_type\",name:\"Report Type\",label:\"Report Type\",type:\"text\",autoFocus:true}),/*#__PURE__*/_jsx(Button,{type:\"submit\",fullWidth:true,variant:\"contained\",color:\"primary\",children:\"Submit\"}),/*#__PURE__*/_jsx(\"div\",{className:\"report\",children:report?/*#__PURE__*/_jsx(\"p\",{children:report}):/*#__PURE__*/_jsx(\"p\",{children:error})})]})]})});}export default UploadInvoice;// UploadInvoice.propTypes = {\n//   setSelectedFile: PropTypes.func.isRequired\n// }","map":{"version":3,"sources":["C:/Users/barry/Desktop/SENG2021/h18abrowniefrontend/src/pages/invoiceUpload.js"],"names":["React","useState","axios","Credentials","Box","Button","Container","TextField","Typography","UploadInvoice","selectedFile","setSelectedFile","report","setReport","error","setError","token","useContext","handleSubmit","event","preventDefault","target","files","file","report_type","value","formData","FormData","append","replace","method","url","data","headers","then","response","console","log","JSON","parse","stringify","catch"],"mappings":"yIAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,MAAO,eAAP,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAO,eAAP,CAEA,MAAOC,CAAAA,WAAP,KAAwB,gBAAxB,CACA,OACEC,GADF,CAEEC,MAFF,CAGEC,SAHF,CAIEC,SAJF,CAKEC,UALF,KAMO,mBANP,C,wFAQA,QAASC,CAAAA,aAAT,EAAyB,CACvB,oBAAwCT,KAAK,CAACC,QAAN,EAAxC,oDAAOS,YAAP,qBAAqBC,eAArB,qBACA,qBAA4BX,KAAK,CAACC,QAAN,EAA5B,qDAAOW,MAAP,qBAAeC,SAAf,qBACA,qBAA0Bb,KAAK,CAACC,QAAN,EAA1B,qDAAOa,KAAP,qBAAcC,QAAd,qBAEA,GAAMC,CAAAA,KAAK,CAAGhB,KAAK,CAACiB,UAAN,CAAiBd,WAAjB,CAAd,CAEA,QAASe,CAAAA,YAAT,CAAsBC,KAAtB,CAA6B,CAC3BA,KAAK,CAACC,cAAN,GAEAT,eAAe,CAACQ,KAAK,CAACE,MAAN,CAAa,CAAb,EAAgBC,KAAhB,CAAsB,CAAtB,CAAD,CAAf,CACA,GAAMC,CAAAA,IAAI,CAAGb,YAAb,CACA,GAAMc,CAAAA,WAAW,CAAGL,KAAK,CAACE,MAAN,CAAa,CAAb,EAAgBI,KAApC,CACA,GAAI,CAACF,IAAD,EAAS,CAACC,WAAd,CAA2B,OAE3B,GAAME,CAAAA,QAAQ,CAAG,GAAIC,CAAAA,QAAJ,EAAjB,CAEAD,QAAQ,CAACE,MAAT,CAAgB,OAAhB,CAAyBZ,KAAK,CAACa,OAAN,CAAc,QAAd,CAAwB,EAAxB,CAAzB,EACAH,QAAQ,CAACE,MAAT,CAAgB,MAAhB,CAAwBL,IAAxB,EACAG,QAAQ,CAACE,MAAT,CAAgB,aAAhB,CAA+BJ,WAA/B,EAEAtB,KAAK,CAAC,CACJ4B,MAAM,CAAE,MADJ,CAEJC,GAAG,uDAFC,CAGJC,IAAI,CAAEN,QAHF,CAIJO,OAAO,CAAE,CAAE,eAAgB,qBAAlB,CAJL,CAAD,CAAL,CAMGC,IANH,CAMQ,SAACC,QAAD,CAAc,CAClBC,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeL,QAAQ,CAACH,IAAxB,CAAX,CAAZ,EACAnB,SAAS,CAACyB,IAAI,CAACE,SAAL,CAAeL,QAAQ,CAACH,IAAxB,CAAD,CAAT,CACA;AACR;AACA;AACA,UAN0B,CAQlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACD,CA1BH,EA2BGS,KA3BH,CA2BS,SAAC3B,KAAD,CAAW,CAAEC,QAAQ,CAAC,sDAAD,CAAR,CAAkE,CA3BxF,EA4BC,CAEH,mBACE,KAAC,SAAD,EAAW,SAAS,CAAC,MAArB,CAA4B,QAAQ,CAAC,IAArC,uBACE,MAAC,GAAD,EAAK,SAAS,CAAE,CAAhB,wBACE,KAAC,UAAD,EAAY,SAAS,CAAC,IAAtB,CAA2B,OAAO,CAAC,IAAnC,4BADF,cAKI,cAAM,QAAQ,CAAEG,YAAhB,wBACE,KAAC,SAAD,EACE,OAAO,CAAC,UADV,CAEE,MAAM,CAAC,QAFT,CAGE,QAAQ,KAHV,CAIE,SAAS,KAJX,CAKE,EAAE,CAAC,MALL,CAME,IAAI,CAAC,MANP,CAOE,IAAI,CAAC,MAPP,CAQE,SAAS,KARX,EADF,cAWE,KAAC,SAAD,EACE,OAAO,CAAC,UADV,CAEE,MAAM,CAAC,QAFT,CAGE,QAAQ,KAHV,CAIE,SAAS,KAJX,CAKE,EAAE,CAAC,aALL,CAME,IAAI,CAAC,aANP,CAOE,KAAK,CAAC,aAPR,CAQE,IAAI,CAAC,MARP,CASE,SAAS,KATX,EAXF,cAsBE,KAAC,MAAD,EAAQ,IAAI,CAAC,QAAb,CAAsB,SAAS,KAA/B,CAAgC,OAAO,CAAC,WAAxC,CAAoD,KAAK,CAAC,SAA1D,oBAtBF,cAyBE,YAAK,SAAS,CAAC,QAAf,UAAyBN,MAAM,cAAG,mBAAIA,MAAJ,EAAH,cAAqB,mBAAIE,KAAJ,EAApD,EAzBF,GALJ,GADF,EADF,CAwCD,CAED,cAAeL,CAAAA,aAAf,CACA;AACA;AACA","sourcesContent":["import React, { useState } from 'react';\r\nimport './wrapper.css';\r\nimport axios from 'axios';\r\nimport './wrapper.css';\r\n\r\nimport Credentials from '../Credentials';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Container,\r\n  TextField,\r\n  Typography,\r\n} from '@material-ui/core';\r\n\r\nfunction UploadInvoice() {\r\n  const [selectedFile, setSelectedFile] = React.useState();  \r\n  const [report, setReport] = React.useState();\r\n  const [error, setError] = React.useState();\r\n\r\n  const token = React.useContext(Credentials);\r\n  \r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    setSelectedFile(event.target[0].files[0]);\r\n    const file = selectedFile;\r\n    const report_type = event.target[2].value;\r\n    if (!file || !report_type) return;\r\n\r\n    const formData = new FormData();\r\n\r\n    formData.append('token', token.replace(/['\"]+/g, ''));\r\n    formData.append('file', file);\r\n    formData.append('report_type', report_type);\r\n    \r\n    axios({\r\n      method: \"post\",\r\n      url: `https://h18abrownie.herokuapp.com/invoice/upload/API`,\r\n      data: formData,\r\n      headers: { \"Content-Type\": \"multipart/form-data\" },\r\n    })\r\n      .then((response) => {\r\n        console.log(JSON.parse(JSON.stringify(response.data)));\r\n        setReport(JSON.stringify(response.data));\r\n        /*  Don't know how to pass query string for now like invoice:id kind of format. \r\n            Will implement if learnt later\r\n            For now it is only json format.\r\n        */ \r\n        \r\n        // const report_id = response.data['report_id'];\r\n        // const queryString = '?token=';\r\n        // queryString.concat(token);\r\n        // queryString.concat('&report_id');\r\n        // queryString.concat(report_id);\r\n        // props.history.push({\r\n        //   pathname: '/reports/read',\r\n        //   search: queryString,\r\n        //   state: { report_type }\r\n        // });\r\n  \r\n        // const data = response.data;\r\n      })\r\n      .catch((error) => { setError(\"File is not xml format or report type is not correct\") });\r\n    }\r\n\r\n  return(\r\n    <Container component=\"main\" maxWidth=\"lg\">\r\n      <Box boxShadow={1}>\r\n        <Typography component=\"h1\" variant=\"h2\">\r\n          Upload Invoice\r\n        </Typography>\r\n        {\r\n          <form onSubmit={handleSubmit}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"file\"\r\n              name=\"file\"\r\n              type=\"file\"\r\n              autoFocus \r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"report_type\"\r\n              name=\"Report Type\"\r\n              label=\"Report Type\"\r\n              type=\"text\"\r\n              autoFocus \r\n            />\r\n            <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\">\r\n            Submit\r\n            </Button>\r\n            <div className=\"report\">{report ? <p>{report}</p> : <p>{error}</p>}</div>\r\n          </form>\r\n\r\n            \r\n        }\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default UploadInvoice;\r\n// UploadInvoice.propTypes = {\r\n//   setSelectedFile: PropTypes.func.isRequired\r\n// }\r\n\r\n"]},"metadata":{},"sourceType":"module"}